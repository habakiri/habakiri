/**
 ******************************************************************************
 * Copyright (c), Takenori Imoto
 * 楓 software http://www.kaede-software.com/
 * All rights reserved.
 ******************************************************************************
 * ソースコード形式かバイナリ形式か、変更するかしないかを問わず、以下の条件を満
 * たす場合に限り、再頒布および使用が許可されます。
 *
 * ・ソースコードを再頒布する場合、上記の著作権表示、本条件一覧、および下記免責
 *   条項を含めること。
 * ・バイナリ形式で再頒布する場合、頒布物に付属のドキュメント等の資料に、上記の
 *   著作権表示、本条件一覧、および下記免責条項を含めること。
 * ・書面による特別の許可なしに、本ソフトウェアから派生した製品の宣伝または販売
 *   促進に、組織の名前またはコントリビューターの名前を使用してはならない。
 *
 * 本ソフトウェアは、著作権者およびコントリビューターによって「現状のまま」提供
 * されており、明示黙示を問わず、商業的な使用可能性、および特定の目的に対する適
 * 合性に関する暗黙の保証も含め、またそれに限定されない、いかなる保証もありませ
 * ん。著作権者もコントリビューターも、事由のいかんを問わず、損害発生の原因いか
 * んを問わず、かつ責任の根拠が契約であるか厳格責任であるか（過失その他の）不法
 * 行為であるかを問わず、仮にそのような損害が発生する可能性を知らされていたとし
 * ても、本ソフトウェアの使用によって発生した（代替品または代用サービスの調達、
 * 使用の喪失、データの喪失、利益の喪失、業務の中断も含め、またそれに限定されな
 * い）直接損害、間接損害、偶発的な損害、特別損害、懲罰的損害、または結果損害に
 * ついて、一切責任を負わないものとします。
 ******************************************************************************
 * 本ソフトウェアは、吉里吉里2 ( http://kikyou.info/tvp/ ) のソースコードをJava
 * に書き換えたものを一部使用しています。
 * 吉里吉里2 Copyright (C) W.Dee <dee@kikyou.info> and contributors
 ******************************************************************************
 */
package jp.kirikiri.tjs2;

import java.util.ArrayList;

public class DictionaryClass extends NativeClass {

	static public int ClassID = -1;
	static private final String CLASS_NAME = "Dictionary";

	protected NativeInstance createNativeInstance() {
		return new DictionaryNI();
	}
	protected Dispatch2 createBaseTJSObject() {
		return new DictionaryObject();
	}

	public DictionaryClass() throws VariantException, TJSException {
		super(CLASS_NAME);
		final int NCM_CLASSID = TJS.registerNativeClass(CLASS_NAME);
		setClassID( NCM_CLASSID );
		ClassID = NCM_CLASSID;

		// constructor
		registerNCM( CLASS_NAME, new NativeClassConstructor() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) {
				DictionaryNI _this = (DictionaryNI)objthis.getNativeInstance( ClassID );
				if( _this == null ) return Error.E_NATIVECLASSCRASH;
				int hr = _this.construct( param, objthis );
				if( hr < 0 ) return hr;

				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "load", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) {
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				// OribinalTODO: implement Dictionary.load()
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "save", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) {
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				// OribinalTODO: implement Dictionary.save()
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "saveStruct", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) throws TJSException {
				// Structured output for flie;
				// the content can be interpret as an expression to re-construct the object.
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				if( param.length < 1) return Error.E_BADPARAMCOUNT;

				String name = param[0].asString();
				String mode = null;
				if( param.length >= 2 && param[1].isVoid() != true ) mode = param[1].asString();

				TextWriteStreamInterface stream = TJS.mStorage.createTextWriteStream(name, mode);
				try {
					ArrayList<Dispatch2> stack = new ArrayList<Dispatch2>();
					stack.add(objthis);
					ni.saveStructuredData( stack, stream, "" );
				} finally {
					stream.destruct();
				}
				if( result != null ) result.set( new Variant(objthis, objthis) );
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "assign", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) throws TJSException {
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				if( param.length < 1) return Error.E_BADPARAMCOUNT;

				boolean clear = true;
				if( param.length >= 2 && param[1].isVoid() != true ) clear = param[1].asBoolean();

				VariantClosure clo = param[0].asObjectClosure();
				if( clo.mObjThis != null )
					ni.assign(clo.mObjThis, clear);
				else if( clo.mObject != null )
					ni.assign(clo.mObject, clear);
				else throw new TJSException(Error.NullAccess);
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "assignStruct", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) throws TJSException {
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				if( param.length < 1) return Error.E_BADPARAMCOUNT;

				ArrayList<Dispatch2> stack = new ArrayList<Dispatch2>();
				VariantClosure clo = param[0].asObjectClosure();
				if( clo.mObjThis != null )
					ni.assignStructure( clo.mObjThis, stack );
				else if( clo.mObject != null )
					ni.assignStructure(clo.mObject, stack);
				else throw new TJSException(Error.NullAccess);
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );

		registerNCM( "clear", new NativeClassMethod() {
			@Override
			protected int process(Variant result, Variant[] param, Dispatch2 objthis) {
				DictionaryNI ni = (DictionaryNI)objthis.getNativeInstance(ClassID);
				if( ni == null ) return Error.E_NATIVECLASSCRASH;
				if( !ni.isValid() ) return Error.E_INVALIDOBJECT;
				ni.clear();
				return Error.S_OK;
			}
		}, CLASS_NAME, Interface.nitMethod, Interface.STATICMEMBER );
	}

}
